@page "/R_Pedidos"
@inject IToastService toastService

<EditForm Model="Orden" OnValidSubmit="Guardar">
    <DataAnnotationsValidator />

    <div class="card-header">
        <h3>Registro de Pedidos</h3>
    </div>

    <div class="card-body">
        <form>

            <div class="form-group">
                <label>Ordenes Id</label>
                <div class="input-group">
                    <InputSelect class="form-control" @bind-Value="Orden.OrdenId">
                        @foreach (var orden in ListaOrdenes)
                        {
                            <option value="@orden.OrdenId">@orden.OrdenId </option>
                        }
                    </InputSelect>
                    <div class="input-group-append">
                        <button type="button" class="btn btn-warning" @onclick="Buscar">
                            <i class="oi oi-magnifying-glass mr-1" />Buscar
                        </button>
                    </div>
                </div>
            </div>

            <div class="form-group">
                <label>Fecha</label>
                <div class="input-group">
                    <InputDate id="fecha" @bind-Value="Orden.Fecha" class="form-control" />
                </div>
                <div><ValidationMessage For="@(() => Orden.Fecha)" /></div>
            </div>

            <div class="form-group">
                <label>Suplidor</label>
                <div class="input-group">
                    <InputSelect class="form-control" @bind-Value="Orden.SuplidorId">
                        @foreach (var suplidor in ListaSuplidores)
                        {
                            <option value="@suplidor.SuplidorId">@suplidor.Nombres </option>
                        }
                    </InputSelect>
                </div>
                <div><ValidationMessage For="@(() => Orden.SuplidorId)" /></div>
            </div>

            <div class="card" style=" border-width: 3px">
                <div class="card-body">

                    <div class="form-group form-inline">
                        <label>Producto:</label>
                        <select @bind="ProductoSeleccionado" class="form-control" style="width:300px; margin-right: 30px " @onclick="(()=> CargarDatosProducto())">
                            <option value="0" disabled selected>Seleccione un producto</option>
                            @foreach (var productos in ListaProductos)
                            {
                                <option value="@productos.ProductoId">@productos.Descripcion</option>

                            }
                        </select>

                        <div class="form-inline" style="margin-right: 30px">
                            <label>Costo:</label>
                            <div class="input-group">
                                <InputNumber @bind-Value="CostoProducto" class="form-control " />

                            </div>
                        </div>

                        <div class="form-inline" style="margin-right: 30px">
                            <label>Cantidad:</label>
                            <div class="input-group">
                                <InputNumber @bind-Value="CantidadProducto" class="form-control " />

                            </div>
                        </div>

                        <div class="form-inline">
                            <button type="button" class="btn btn-primary input-group-text" @onclick="Agregar">
                                <i class="oi oi-plus mr-2" /> Agregar
                            </button>
                        </div>

                        <div><ValidationMessage For="@(() => Orden.Detalle)" /></div>

                    </div>

                    <div>
                        <table class="table">
                            <thead>
                                <tr>
                                    <th>ProductoId</th>
                                    <th>Cantidad</th>
                                    <th>Costo</th>
                                    <th>Total</th>
                                </tr>
                            </thead>

                            <tbody class="text-dark">
                                @foreach (var orden in Orden.Detalle)
                                {
                                    <tr>
                                        <td>@orden.ProductoId</td>
                                        <td>@orden.Cantidad</td>
                                        <td>@orden.Costo</td>
                                        <td>@Calculo(orden.Cantidad, orden.Costo)</td>


                                        <td>
                                            <button class="btn btn-danger" type="button" @onclick="(()=> Remover(orden.OrdenId))">
                                                <i class="oi oi-basket" />
                                            </button>
                                        </td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>

                </div>
            </div>

        </form>

        <div>
            <label class="text-dark font-weight-bolder">Monto Total: @Orden.Monto</label>
        </div>

        <div class="card-footer">
            <div class="form-group text-center" display: inline-block>

                <button type="button" class="btn btn-lg btn-primary" @onclick="Limpiar">
                    <i class="oi oi-document mr-2" />Nuevo
                </button>

                <button type="submit" class="btn btn-lg btn-success">
                    <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="currentColor" class="bi bi-save2" viewBox="0 0 16 16">
                        <path d="M2 1a1 1 0 0 0-1 1v12a1 1 0 0 0 1 1h12a1 1 0 0 0 1-1V2a1 1 0 0 0-1-1H9.5a1 1 0 0 0-1 1v4.5h2a.5.5 0 0 1 .354.854l-2.5 2.5a.5.5 0 0 1-.708 0l-2.5-2.5A.5.5 0 0 1 5.5 6.5h2V2a2 2 0 0 1 2-2H14a2 2 0 0 1 2 2v12a2 2 0 0 1-2 2H2a2 2 0 0 1-2-2V2a2 2 0 0 1 2-2h2.5a.5.5 0 0 1 0 1H2z" />
                    </svg>Guardar
                </button>

                <button type="button" class="btn btn-lg btn-danger" @onclick="Eliminar">
                    <i class="oi oi-trash mr-2"></i>Eliminar
                </button>

            </div>
        </div>

    </div>

</EditForm>

@code {
    private Ordenes Orden { get; set; } = new Ordenes();
    private OrdenesDetalle Detalle { get; set; } = new OrdenesDetalle(0, 0, 0, 0);
    private List<Ordenes> ListaOrdenes { get; set; } = new List<Ordenes>();
    private List<Suplidores> ListaSuplidores { get; set; } = new List<Suplidores>();
    private List<Productos> ListaProductos { get; set; } = new List<Productos>();
    private decimal ProductoTotal { get; set; }
    private int ProductoSeleccionado { get; set; }
    private decimal CostoProducto { get; set; }
    private decimal CantidadProducto { get; set; }


    protected override void OnInitialized()
    {

        Limpiar();
    }
    private void Limpiar()
    {
        ListaOrdenes = OrdenesBLL.GetList();
        ListaSuplidores = SuplidoresBLL.GetList();
        ListaProductos = ProductosBLL.GetList();
        ProductoSeleccionado = 0;
        Orden = new Ordenes();
    }
    private void Buscar()
    {
        if (Orden.OrdenId > 0)
        {
            var encontrado = OrdenesBLL.Buscar(Orden.OrdenId);

            if (encontrado != null)
                this.Orden = encontrado;
            else
                toastService.ShowWarning("No encontrado");
        }
    }

    public void Guardar()
    {
        bool guardo = true;

        guardo = OrdenesBLL.Guardar(Orden);

        if (guardo)
        {
            Limpiar();
            toastService.ShowSuccess("Guardado correctamente");
        }
        else
            toastService.ShowError("No fue posible guardar");
    }

    public void Eliminar()
    {
        bool elimino;

        elimino = OrdenesBLL.Eliminar(Orden.OrdenId);

        if (elimino)
        {
            Limpiar();
            toastService.ShowSuccess("Eliminado correctamente");
        }
        else
            toastService.ShowError("No fue posible eliminar");
    }

    private void Agregar()
    {
        ProductoTotal = CostoProducto * CantidadProducto;
        Orden.Monto += ProductoTotal;
        Orden.Detalle.Add(new OrdenesDetalle(Orden.OrdenId, ProductoSeleccionado, CantidadProducto, CostoProducto));

        Productos producto = ProductosBLL.Buscar(ProductoSeleccionado);
        producto.Inventario -= CantidadProducto;
        ProductosBLL.Guardar(producto);
        ListaProductos = ProductosBLL.GetList();

        ProductoSeleccionado = 0;
        CostoProducto = 0;
        CantidadProducto = 0;


    }

    private void Remover(int id)
    {
        Detalle = Orden.Detalle.Find(o => o.OrdenId == id);
        Orden.Monto -= (Detalle.Costo * Detalle.Cantidad);
        Orden.Detalle.Remove(Detalle);
        Productos producto = ProductosBLL.Buscar(Detalle.ProductoId);
        producto.Inventario += Detalle.Cantidad;
        ProductosBLL.Guardar(producto);
        ListaProductos = ProductosBLL.GetList();
        Detalle = new OrdenesDetalle(0, 0, 0, 0);

    }
    private void CargarDatosProducto()
    {
        if (ProductoSeleccionado > 0)
        {
            CantidadProducto = ProductosBLL.Buscar(ProductoSeleccionado).Inventario;
            CostoProducto = ProductosBLL.Buscar(ProductoSeleccionado).Costo;
        }

    }

    private decimal Calculo(decimal cantidad, decimal costo)
    {
        return cantidad * costo;
    }

}